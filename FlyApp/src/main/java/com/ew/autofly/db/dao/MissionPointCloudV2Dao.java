package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.db.converter.StringConverter;
import java.util.List;

import com.ew.autofly.db.entity.MissionPointCloudV2;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_Mission_PointCloud_v2".
*/
public class MissionPointCloudV2Dao extends AbstractDao<MissionPointCloudV2, Long> {

    public static final String TABLENAME = "t_Mission_PointCloud_v2";

    /**
     * Properties of entity MissionPointCloudV2.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MissionId = new Property(1, String.class, "missionId", false, "MISSION_ID");
        public final static Property MissionBatchId = new Property(2, String.class, "missionBatchId", false, "MISSION_BATCH_ID");
        public final static Property MissionType = new Property(3, int.class, "missionType", false, "MISSION_TYPE");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Snapshot = new Property(5, String.class, "snapshot", false, "SNAPSHOT");
        public final static Property Status = new Property(6, int.class, "status", false, "STATUS");
        public final static Property CreateDate = new Property(7, java.util.Date.class, "createDate", false, "CREATE_DATE");
        public final static Property StartTime = new Property(8, java.util.Date.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(9, java.util.Date.class, "endTime", false, "END_TIME");
        public final static Property StartPhotoIndex = new Property(10, int.class, "startPhotoIndex", false, "START_PHOTO_INDEX");
        public final static Property EndPhotoIndex = new Property(11, int.class, "endPhotoIndex", false, "END_PHOTO_INDEX");
        public final static Property GeometryType = new Property(12, int.class, "geometryType", false, "GEOMETRY_TYPE");
        public final static Property GeometryLatLngList = new Property(13, String.class, "geometryLatLngList", false, "GEOMETRY_LAT_LNG_LIST");
        public final static Property ConvergeAltitude = new Property(14, float.class, "convergeAltitude", false, "CONVERGE_ALTITUDE");
        public final static Property ConvergeRadius = new Property(15, float.class, "convergeRadius", false, "CONVERGE_RADIUS");
        public final static Property ConvergeSpeed = new Property(16, float.class, "convergeSpeed", false, "CONVERGE_SPEED");
        public final static Property ConvergeStraightLineTime = new Property(17, int.class, "convergeStraightLineTime", false, "CONVERGE_STRAIGHT_LINE_TIME");
        public final static Property ConvergePositionStr = new Property(18, String.class, "convergePositionStr", false, "CONVERGE_POSITION_STR");
        public final static Property FlyWay = new Property(19, int.class, "flyWay", false, "FLY_WAY");
        public final static Property FlyWaySide = new Property(20, int.class, "flyWaySide", false, "FLY_WAY_SIDE");
        public final static Property IsReverse = new Property(21, boolean.class, "isReverse", false, "IS_REVERSE");
        public final static Property IsAltitudeFixed = new Property(22, boolean.class, "isAltitudeFixed", false, "IS_ALTITUDE_FIXED");
        public final static Property Altitude = new Property(23, int.class, "altitude", false, "ALTITUDE");
        public final static Property FlySpeed = new Property(24, int.class, "flySpeed", false, "FLY_SPEED");
        public final static Property EntryHeight = new Property(25, int.class, "entryHeight", false, "ENTRY_HEIGHT");
        public final static Property EntryIncrease = new Property(26, int.class, "entryIncrease", false, "ENTRY_INCREASE");
        public final static Property ExitIncrease = new Property(27, int.class, "exitIncrease", false, "EXIT_INCREASE");
        public final static Property SideDistance = new Property(28, float.class, "sideDistance", false, "SIDE_DISTANCE");
        public final static Property LayerNumber = new Property(29, int.class, "layerNumber", false, "LAYER_NUMBER");
        public final static Property LayerHeight = new Property(30, float.class, "layerHeight", false, "LAYER_HEIGHT");
        public final static Property EndShrink = new Property(31, float.class, "endShrink", false, "END_SHRINK");
    }

    private final StringConverter geometryLatLngListConverter = new StringConverter();

    public MissionPointCloudV2Dao(DaoConfig config) {
        super(config);
    }
    
    public MissionPointCloudV2Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_Mission_PointCloud_v2\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MISSION_ID\" TEXT UNIQUE ," + // 1: missionId
                "\"MISSION_BATCH_ID\" TEXT," + // 2: missionBatchId
                "\"MISSION_TYPE\" INTEGER NOT NULL ," + // 3: missionType
                "\"NAME\" TEXT," + // 4: name
                "\"SNAPSHOT\" TEXT," + // 5: snapshot
                "\"STATUS\" INTEGER NOT NULL ," + // 6: status
                "\"CREATE_DATE\" INTEGER," + // 7: createDate
                "\"START_TIME\" INTEGER," + // 8: startTime
                "\"END_TIME\" INTEGER," + // 9: endTime
                "\"START_PHOTO_INDEX\" INTEGER NOT NULL ," + // 10: startPhotoIndex
                "\"END_PHOTO_INDEX\" INTEGER NOT NULL ," + // 11: endPhotoIndex
                "\"GEOMETRY_TYPE\" INTEGER NOT NULL ," + // 12: geometryType
                "\"GEOMETRY_LAT_LNG_LIST\" TEXT," + // 13: geometryLatLngList
                "\"CONVERGE_ALTITUDE\" REAL NOT NULL ," + // 14: convergeAltitude
                "\"CONVERGE_RADIUS\" REAL NOT NULL ," + // 15: convergeRadius
                "\"CONVERGE_SPEED\" REAL NOT NULL ," + // 16: convergeSpeed
                "\"CONVERGE_STRAIGHT_LINE_TIME\" INTEGER NOT NULL ," + // 17: convergeStraightLineTime
                "\"CONVERGE_POSITION_STR\" TEXT," + // 18: convergePositionStr
                "\"FLY_WAY\" INTEGER NOT NULL ," + // 19: flyWay
                "\"FLY_WAY_SIDE\" INTEGER NOT NULL ," + // 20: flyWaySide
                "\"IS_REVERSE\" INTEGER NOT NULL ," + // 21: isReverse
                "\"IS_ALTITUDE_FIXED\" INTEGER NOT NULL ," + // 22: isAltitudeFixed
                "\"ALTITUDE\" INTEGER NOT NULL ," + // 23: altitude
                "\"FLY_SPEED\" INTEGER NOT NULL ," + // 24: flySpeed
                "\"ENTRY_HEIGHT\" INTEGER NOT NULL ," + // 25: entryHeight
                "\"ENTRY_INCREASE\" INTEGER NOT NULL ," + // 26: entryIncrease
                "\"EXIT_INCREASE\" INTEGER NOT NULL ," + // 27: exitIncrease
                "\"SIDE_DISTANCE\" REAL NOT NULL ," + // 28: sideDistance
                "\"LAYER_NUMBER\" INTEGER NOT NULL ," + // 29: layerNumber
                "\"LAYER_HEIGHT\" REAL NOT NULL ," + // 30: layerHeight
                "\"END_SHRINK\" REAL NOT NULL );"); // 31: endShrink
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_Mission_PointCloud_v2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MissionPointCloudV2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(2, missionId);
        }
 
        String missionBatchId = entity.getMissionBatchId();
        if (missionBatchId != null) {
            stmt.bindString(3, missionBatchId);
        }
        stmt.bindLong(4, entity.getMissionType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String snapshot = entity.getSnapshot();
        if (snapshot != null) {
            stmt.bindString(6, snapshot);
        }
        stmt.bindLong(7, entity.getStatus());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(9, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(10, endTime.getTime());
        }
        stmt.bindLong(11, entity.getStartPhotoIndex());
        stmt.bindLong(12, entity.getEndPhotoIndex());
        stmt.bindLong(13, entity.getGeometryType());
 
        List geometryLatLngList = entity.getGeometryLatLngList();
        if (geometryLatLngList != null) {
            stmt.bindString(14, geometryLatLngListConverter.convertToDatabaseValue(geometryLatLngList));
        }
        stmt.bindDouble(15, entity.getConvergeAltitude());
        stmt.bindDouble(16, entity.getConvergeRadius());
        stmt.bindDouble(17, entity.getConvergeSpeed());
        stmt.bindLong(18, entity.getConvergeStraightLineTime());
 
        String convergePositionStr = entity.getConvergePositionStr();
        if (convergePositionStr != null) {
            stmt.bindString(19, convergePositionStr);
        }
        stmt.bindLong(20, entity.getFlyWay());
        stmt.bindLong(21, entity.getFlyWaySide());
        stmt.bindLong(22, entity.getIsReverse() ? 1L: 0L);
        stmt.bindLong(23, entity.getIsAltitudeFixed() ? 1L: 0L);
        stmt.bindLong(24, entity.getAltitude());
        stmt.bindLong(25, entity.getFlySpeed());
        stmt.bindLong(26, entity.getEntryHeight());
        stmt.bindLong(27, entity.getEntryIncrease());
        stmt.bindLong(28, entity.getExitIncrease());
        stmt.bindDouble(29, entity.getSideDistance());
        stmt.bindLong(30, entity.getLayerNumber());
        stmt.bindDouble(31, entity.getLayerHeight());
        stmt.bindDouble(32, entity.getEndShrink());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MissionPointCloudV2 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(2, missionId);
        }
 
        String missionBatchId = entity.getMissionBatchId();
        if (missionBatchId != null) {
            stmt.bindString(3, missionBatchId);
        }
        stmt.bindLong(4, entity.getMissionType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String snapshot = entity.getSnapshot();
        if (snapshot != null) {
            stmt.bindString(6, snapshot);
        }
        stmt.bindLong(7, entity.getStatus());
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(8, createDate.getTime());
        }
 
        java.util.Date startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(9, startTime.getTime());
        }
 
        java.util.Date endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(10, endTime.getTime());
        }
        stmt.bindLong(11, entity.getStartPhotoIndex());
        stmt.bindLong(12, entity.getEndPhotoIndex());
        stmt.bindLong(13, entity.getGeometryType());
 
        List geometryLatLngList = entity.getGeometryLatLngList();
        if (geometryLatLngList != null) {
            stmt.bindString(14, geometryLatLngListConverter.convertToDatabaseValue(geometryLatLngList));
        }
        stmt.bindDouble(15, entity.getConvergeAltitude());
        stmt.bindDouble(16, entity.getConvergeRadius());
        stmt.bindDouble(17, entity.getConvergeSpeed());
        stmt.bindLong(18, entity.getConvergeStraightLineTime());
 
        String convergePositionStr = entity.getConvergePositionStr();
        if (convergePositionStr != null) {
            stmt.bindString(19, convergePositionStr);
        }
        stmt.bindLong(20, entity.getFlyWay());
        stmt.bindLong(21, entity.getFlyWaySide());
        stmt.bindLong(22, entity.getIsReverse() ? 1L: 0L);
        stmt.bindLong(23, entity.getIsAltitudeFixed() ? 1L: 0L);
        stmt.bindLong(24, entity.getAltitude());
        stmt.bindLong(25, entity.getFlySpeed());
        stmt.bindLong(26, entity.getEntryHeight());
        stmt.bindLong(27, entity.getEntryIncrease());
        stmt.bindLong(28, entity.getExitIncrease());
        stmt.bindDouble(29, entity.getSideDistance());
        stmt.bindLong(30, entity.getLayerNumber());
        stmt.bindDouble(31, entity.getLayerHeight());
        stmt.bindDouble(32, entity.getEndShrink());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MissionPointCloudV2 readEntity(Cursor cursor, int offset) {
        MissionPointCloudV2 entity = new MissionPointCloudV2( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // missionId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // missionBatchId
            cursor.getInt(offset + 3), // missionType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // snapshot
            cursor.getInt(offset + 6), // status
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createDate
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // startTime
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)), // endTime
            cursor.getInt(offset + 10), // startPhotoIndex
            cursor.getInt(offset + 11), // endPhotoIndex
            cursor.getInt(offset + 12), // geometryType
            cursor.isNull(offset + 13) ? null : geometryLatLngListConverter.convertToEntityProperty(cursor.getString(offset + 13)), // geometryLatLngList
            cursor.getFloat(offset + 14), // convergeAltitude
            cursor.getFloat(offset + 15), // convergeRadius
            cursor.getFloat(offset + 16), // convergeSpeed
            cursor.getInt(offset + 17), // convergeStraightLineTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // convergePositionStr
            cursor.getInt(offset + 19), // flyWay
            cursor.getInt(offset + 20), // flyWaySide
            cursor.getShort(offset + 21) != 0, // isReverse
            cursor.getShort(offset + 22) != 0, // isAltitudeFixed
            cursor.getInt(offset + 23), // altitude
            cursor.getInt(offset + 24), // flySpeed
            cursor.getInt(offset + 25), // entryHeight
            cursor.getInt(offset + 26), // entryIncrease
            cursor.getInt(offset + 27), // exitIncrease
            cursor.getFloat(offset + 28), // sideDistance
            cursor.getInt(offset + 29), // layerNumber
            cursor.getFloat(offset + 30), // layerHeight
            cursor.getFloat(offset + 31) // endShrink
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MissionPointCloudV2 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMissionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMissionBatchId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMissionType(cursor.getInt(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSnapshot(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStatus(cursor.getInt(offset + 6));
        entity.setCreateDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setStartTime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setEndTime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
        entity.setStartPhotoIndex(cursor.getInt(offset + 10));
        entity.setEndPhotoIndex(cursor.getInt(offset + 11));
        entity.setGeometryType(cursor.getInt(offset + 12));
        entity.setGeometryLatLngList(cursor.isNull(offset + 13) ? null : geometryLatLngListConverter.convertToEntityProperty(cursor.getString(offset + 13)));
        entity.setConvergeAltitude(cursor.getFloat(offset + 14));
        entity.setConvergeRadius(cursor.getFloat(offset + 15));
        entity.setConvergeSpeed(cursor.getFloat(offset + 16));
        entity.setConvergeStraightLineTime(cursor.getInt(offset + 17));
        entity.setConvergePositionStr(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setFlyWay(cursor.getInt(offset + 19));
        entity.setFlyWaySide(cursor.getInt(offset + 20));
        entity.setIsReverse(cursor.getShort(offset + 21) != 0);
        entity.setIsAltitudeFixed(cursor.getShort(offset + 22) != 0);
        entity.setAltitude(cursor.getInt(offset + 23));
        entity.setFlySpeed(cursor.getInt(offset + 24));
        entity.setEntryHeight(cursor.getInt(offset + 25));
        entity.setEntryIncrease(cursor.getInt(offset + 26));
        entity.setExitIncrease(cursor.getInt(offset + 27));
        entity.setSideDistance(cursor.getFloat(offset + 28));
        entity.setLayerNumber(cursor.getInt(offset + 29));
        entity.setLayerHeight(cursor.getFloat(offset + 30));
        entity.setEndShrink(cursor.getFloat(offset + 31));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MissionPointCloudV2 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MissionPointCloudV2 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MissionPointCloudV2 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
