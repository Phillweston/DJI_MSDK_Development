package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.db.entity.MissionBatch;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_Mission_Batch".
*/
public class MissionBatchDao extends AbstractDao<MissionBatch, Long> {

    public static final String TABLENAME = "t_Mission_Batch";

    /**
     * Properties of entity MissionBatch.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MissionBatchId = new Property(1, String.class, "missionBatchId", false, "MISSION_BATCH_ID");
        public final static Property MissionType = new Property(2, int.class, "missionType", false, "MISSION_TYPE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Status = new Property(4, int.class, "status", false, "STATUS");
        public final static Property SnapShot = new Property(5, String.class, "snapShot", false, "SNAP_SHOT");
        public final static Property CreateDate = new Property(6, java.util.Date.class, "createDate", false, "CREATE_DATE");
    }


    public MissionBatchDao(DaoConfig config) {
        super(config);
    }
    
    public MissionBatchDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_Mission_Batch\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MISSION_BATCH_ID\" TEXT," + // 1: missionBatchId
                "\"MISSION_TYPE\" INTEGER NOT NULL ," + // 2: missionType
                "\"NAME\" TEXT," + // 3: name
                "\"STATUS\" INTEGER NOT NULL ," + // 4: status
                "\"SNAP_SHOT\" TEXT," + // 5: snapShot
                "\"CREATE_DATE\" INTEGER);"); // 6: createDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_Mission_Batch\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MissionBatch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String missionBatchId = entity.getMissionBatchId();
        if (missionBatchId != null) {
            stmt.bindString(2, missionBatchId);
        }
        stmt.bindLong(3, entity.getMissionType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getStatus());
 
        String snapShot = entity.getSnapShot();
        if (snapShot != null) {
            stmt.bindString(6, snapShot);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MissionBatch entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String missionBatchId = entity.getMissionBatchId();
        if (missionBatchId != null) {
            stmt.bindString(2, missionBatchId);
        }
        stmt.bindLong(3, entity.getMissionType());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getStatus());
 
        String snapShot = entity.getSnapShot();
        if (snapShot != null) {
            stmt.bindString(6, snapShot);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(7, createDate.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MissionBatch readEntity(Cursor cursor, int offset) {
        MissionBatch entity = new MissionBatch( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // missionBatchId
            cursor.getInt(offset + 2), // missionType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // status
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // snapShot
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)) // createDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MissionBatch entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMissionBatchId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMissionType(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStatus(cursor.getInt(offset + 4));
        entity.setSnapShot(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MissionBatch entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MissionBatch entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MissionBatch entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
