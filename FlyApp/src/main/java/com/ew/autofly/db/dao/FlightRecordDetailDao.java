package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.db.entity.FlightRecordDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "flight_record_detail".
*/
public class FlightRecordDetailDao extends AbstractDao<FlightRecordDetail, Long> {

    public static final String TABLENAME = "flight_record_detail";

    /**
     * Properties of entity FlightRecordDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "id");
        public final static Property RecordId = new Property(1, String.class, "recordId", false, "record_id");
        public final static Property Latitude = new Property(2, double.class, "latitude", false, "latitude");
        public final static Property Longitude = new Property(3, double.class, "longitude", false, "longitude");
        public final static Property Altitude = new Property(4, double.class, "altitude", false, "altitude");
        public final static Property Distance = new Property(5, double.class, "distance", false, "distance");
        public final static Property HorizontalSpeed = new Property(6, int.class, "horizontalSpeed", false, "horizontal_speed");
        public final static Property VerticalSpeed = new Property(7, int.class, "verticalSpeed", false, "vertical_speed");
        public final static Property BatteryLevel = new Property(8, double.class, "batteryLevel", false, "battery_level");
        public final static Property GPSMode = new Property(9, String.class, "GPSMode", false, "gps_mode");
        public final static Property Angle = new Property(10, double.class, "angle", false, "angle");
        public final static Property LeftStickVerticalPosition = new Property(11, double.class, "leftStickVerticalPosition", false, "left_stick_vertical_pos");
        public final static Property LeftStickHorizontalPosition = new Property(12, double.class, "leftStickHorizontalPosition", false, "left_stick_horizontal_pos");
        public final static Property RightStickVerticalPosition = new Property(13, double.class, "rightStickVerticalPosition", false, "right_stick_vertical_pos");
        public final static Property RightStickHorizontalPosition = new Property(14, double.class, "rightStickHorizontalPosition", false, "right_stick_horizontal_pos");
        public final static Property CreatedTime = new Property(15, String.class, "createdTime", false, "created_time");
        public final static Property GPSSatelliteCount = new Property(16, int.class, "GPSSatelliteCount", false, "gps_satellite_count");
        public final static Property MissionId = new Property(17, String.class, "missionId", false, "mission_id");
    }


    public FlightRecordDetailDao(DaoConfig config) {
        super(config);
    }
    
    public FlightRecordDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"flight_record_detail\" (" + //
                "\"id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"record_id\" TEXT," + // 1: recordId
                "\"latitude\" REAL NOT NULL ," + // 2: latitude
                "\"longitude\" REAL NOT NULL ," + // 3: longitude
                "\"altitude\" REAL NOT NULL ," + // 4: altitude
                "\"distance\" REAL NOT NULL ," + // 5: distance
                "\"horizontal_speed\" INTEGER NOT NULL ," + // 6: horizontalSpeed
                "\"vertical_speed\" INTEGER NOT NULL ," + // 7: verticalSpeed
                "\"battery_level\" REAL NOT NULL ," + // 8: batteryLevel
                "\"gps_mode\" TEXT," + // 9: GPSMode
                "\"angle\" REAL NOT NULL ," + // 10: angle
                "\"left_stick_vertical_pos\" REAL NOT NULL ," + // 11: leftStickVerticalPosition
                "\"left_stick_horizontal_pos\" REAL NOT NULL ," + // 12: leftStickHorizontalPosition
                "\"right_stick_vertical_pos\" REAL NOT NULL ," + // 13: rightStickVerticalPosition
                "\"right_stick_horizontal_pos\" REAL NOT NULL ," + // 14: rightStickHorizontalPosition
                "\"created_time\" TEXT," + // 15: createdTime
                "\"gps_satellite_count\" INTEGER NOT NULL ," + // 16: GPSSatelliteCount
                "\"mission_id\" TEXT);"); // 17: missionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"flight_record_detail\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FlightRecordDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(2, recordId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getAltitude());
        stmt.bindDouble(6, entity.getDistance());
        stmt.bindLong(7, entity.getHorizontalSpeed());
        stmt.bindLong(8, entity.getVerticalSpeed());
        stmt.bindDouble(9, entity.getBatteryLevel());
 
        String GPSMode = entity.getGPSMode();
        if (GPSMode != null) {
            stmt.bindString(10, GPSMode);
        }
        stmt.bindDouble(11, entity.getAngle());
        stmt.bindDouble(12, entity.getLeftStickVerticalPosition());
        stmt.bindDouble(13, entity.getLeftStickHorizontalPosition());
        stmt.bindDouble(14, entity.getRightStickVerticalPosition());
        stmt.bindDouble(15, entity.getRightStickHorizontalPosition());
 
        String createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindString(16, createdTime);
        }
        stmt.bindLong(17, entity.getGPSSatelliteCount());
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(18, missionId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FlightRecordDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String recordId = entity.getRecordId();
        if (recordId != null) {
            stmt.bindString(2, recordId);
        }
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getAltitude());
        stmt.bindDouble(6, entity.getDistance());
        stmt.bindLong(7, entity.getHorizontalSpeed());
        stmt.bindLong(8, entity.getVerticalSpeed());
        stmt.bindDouble(9, entity.getBatteryLevel());
 
        String GPSMode = entity.getGPSMode();
        if (GPSMode != null) {
            stmt.bindString(10, GPSMode);
        }
        stmt.bindDouble(11, entity.getAngle());
        stmt.bindDouble(12, entity.getLeftStickVerticalPosition());
        stmt.bindDouble(13, entity.getLeftStickHorizontalPosition());
        stmt.bindDouble(14, entity.getRightStickVerticalPosition());
        stmt.bindDouble(15, entity.getRightStickHorizontalPosition());
 
        String createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindString(16, createdTime);
        }
        stmt.bindLong(17, entity.getGPSSatelliteCount());
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(18, missionId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FlightRecordDetail readEntity(Cursor cursor, int offset) {
        FlightRecordDetail entity = new FlightRecordDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // recordId
            cursor.getDouble(offset + 2), // latitude
            cursor.getDouble(offset + 3), // longitude
            cursor.getDouble(offset + 4), // altitude
            cursor.getDouble(offset + 5), // distance
            cursor.getInt(offset + 6), // horizontalSpeed
            cursor.getInt(offset + 7), // verticalSpeed
            cursor.getDouble(offset + 8), // batteryLevel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // GPSMode
            cursor.getDouble(offset + 10), // angle
            cursor.getDouble(offset + 11), // leftStickVerticalPosition
            cursor.getDouble(offset + 12), // leftStickHorizontalPosition
            cursor.getDouble(offset + 13), // rightStickVerticalPosition
            cursor.getDouble(offset + 14), // rightStickHorizontalPosition
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // createdTime
            cursor.getInt(offset + 16), // GPSSatelliteCount
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // missionId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FlightRecordDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecordId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setAltitude(cursor.getDouble(offset + 4));
        entity.setDistance(cursor.getDouble(offset + 5));
        entity.setHorizontalSpeed(cursor.getInt(offset + 6));
        entity.setVerticalSpeed(cursor.getInt(offset + 7));
        entity.setBatteryLevel(cursor.getDouble(offset + 8));
        entity.setGPSMode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAngle(cursor.getDouble(offset + 10));
        entity.setLeftStickVerticalPosition(cursor.getDouble(offset + 11));
        entity.setLeftStickHorizontalPosition(cursor.getDouble(offset + 12));
        entity.setRightStickVerticalPosition(cursor.getDouble(offset + 13));
        entity.setRightStickHorizontalPosition(cursor.getDouble(offset + 14));
        entity.setCreatedTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setGPSSatelliteCount(cursor.getInt(offset + 16));
        entity.setMissionId(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FlightRecordDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FlightRecordDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FlightRecordDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
