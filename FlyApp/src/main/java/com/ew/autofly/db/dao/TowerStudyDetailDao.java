package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.db.entity.TowerStudyDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "t_Tower_StudyDetail".
*/
public class TowerStudyDetailDao extends AbstractDao<TowerStudyDetail, Long> {

    public static final String TABLENAME = "t_Tower_StudyDetail";

    /**
     * Properties of entity TowerStudyDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Id");
        public final static Property TowerId = new Property(1, String.class, "towerId", false, "towerId");
        public final static Property StartAltitude = new Property(2, double.class, "startAltitude", false, "startAltitude");
        public final static Property Header = new Property(3, double.class, "header", false, "header");
        public final static Property Pitch = new Property(4, double.class, "pitch", false, "pitch");
        public final static Property Roll = new Property(5, double.class, "roll", false, "roll");
        public final static Property Angle = new Property(6, double.class, "angle", false, "angle");
        public final static Property Latitude = new Property(7, double.class, "latitude", false, "latitude");
        public final static Property Longitude = new Property(8, double.class, "longitude", false, "longitude");
        public final static Property Altitude = new Property(9, double.class, "altitude", false, "altitude");
        public final static Property CreatedTime = new Property(10, java.util.Date.class, "createdTime", false, "CreatedTime");
        public final static Property HomeLatitude = new Property(11, double.class, "homeLatitude", false, "home_latitude");
        public final static Property HomeLongitude = new Property(12, double.class, "homeLongitude", false, "home_longitude");
        public final static Property HomeAltitude = new Property(13, double.class, "homeAltitude", false, "home_altitude");
        public final static Property IsRTK = new Property(14, boolean.class, "isRTK", false, "is_rtk");
    }


    public TowerStudyDetailDao(DaoConfig config) {
        super(config);
    }
    
    public TowerStudyDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"t_Tower_StudyDetail\" (" + //
                "\"Id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"towerId\" TEXT," + // 1: towerId
                "\"startAltitude\" REAL NOT NULL ," + // 2: startAltitude
                "\"header\" REAL NOT NULL ," + // 3: header
                "\"pitch\" REAL NOT NULL ," + // 4: pitch
                "\"roll\" REAL NOT NULL ," + // 5: roll
                "\"angle\" REAL NOT NULL ," + // 6: angle
                "\"latitude\" REAL NOT NULL ," + // 7: latitude
                "\"longitude\" REAL NOT NULL ," + // 8: longitude
                "\"altitude\" REAL NOT NULL ," + // 9: altitude
                "\"CreatedTime\" INTEGER," + // 10: createdTime
                "\"home_latitude\" REAL NOT NULL ," + // 11: homeLatitude
                "\"home_longitude\" REAL NOT NULL ," + // 12: homeLongitude
                "\"home_altitude\" REAL NOT NULL ," + // 13: homeAltitude
                "\"is_rtk\" INTEGER NOT NULL );"); // 14: isRTK
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"t_Tower_StudyDetail\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TowerStudyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String towerId = entity.getTowerId();
        if (towerId != null) {
            stmt.bindString(2, towerId);
        }
        stmt.bindDouble(3, entity.getStartAltitude());
        stmt.bindDouble(4, entity.getHeader());
        stmt.bindDouble(5, entity.getPitch());
        stmt.bindDouble(6, entity.getRoll());
        stmt.bindDouble(7, entity.getAngle());
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getAltitude());
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(11, createdTime.getTime());
        }
        stmt.bindDouble(12, entity.getHomeLatitude());
        stmt.bindDouble(13, entity.getHomeLongitude());
        stmt.bindDouble(14, entity.getHomeAltitude());
        stmt.bindLong(15, entity.getIsRTK() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TowerStudyDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String towerId = entity.getTowerId();
        if (towerId != null) {
            stmt.bindString(2, towerId);
        }
        stmt.bindDouble(3, entity.getStartAltitude());
        stmt.bindDouble(4, entity.getHeader());
        stmt.bindDouble(5, entity.getPitch());
        stmt.bindDouble(6, entity.getRoll());
        stmt.bindDouble(7, entity.getAngle());
        stmt.bindDouble(8, entity.getLatitude());
        stmt.bindDouble(9, entity.getLongitude());
        stmt.bindDouble(10, entity.getAltitude());
 
        java.util.Date createdTime = entity.getCreatedTime();
        if (createdTime != null) {
            stmt.bindLong(11, createdTime.getTime());
        }
        stmt.bindDouble(12, entity.getHomeLatitude());
        stmt.bindDouble(13, entity.getHomeLongitude());
        stmt.bindDouble(14, entity.getHomeAltitude());
        stmt.bindLong(15, entity.getIsRTK() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TowerStudyDetail readEntity(Cursor cursor, int offset) {
        TowerStudyDetail entity = new TowerStudyDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // towerId
            cursor.getDouble(offset + 2), // startAltitude
            cursor.getDouble(offset + 3), // header
            cursor.getDouble(offset + 4), // pitch
            cursor.getDouble(offset + 5), // roll
            cursor.getDouble(offset + 6), // angle
            cursor.getDouble(offset + 7), // latitude
            cursor.getDouble(offset + 8), // longitude
            cursor.getDouble(offset + 9), // altitude
            cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)), // createdTime
            cursor.getDouble(offset + 11), // homeLatitude
            cursor.getDouble(offset + 12), // homeLongitude
            cursor.getDouble(offset + 13), // homeAltitude
            cursor.getShort(offset + 14) != 0 // isRTK
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TowerStudyDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTowerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartAltitude(cursor.getDouble(offset + 2));
        entity.setHeader(cursor.getDouble(offset + 3));
        entity.setPitch(cursor.getDouble(offset + 4));
        entity.setRoll(cursor.getDouble(offset + 5));
        entity.setAngle(cursor.getDouble(offset + 6));
        entity.setLatitude(cursor.getDouble(offset + 7));
        entity.setLongitude(cursor.getDouble(offset + 8));
        entity.setAltitude(cursor.getDouble(offset + 9));
        entity.setCreatedTime(cursor.isNull(offset + 10) ? null : new java.util.Date(cursor.getLong(offset + 10)));
        entity.setHomeLatitude(cursor.getDouble(offset + 11));
        entity.setHomeLongitude(cursor.getDouble(offset + 12));
        entity.setHomeAltitude(cursor.getDouble(offset + 13));
        entity.setIsRTK(cursor.getShort(offset + 14) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TowerStudyDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TowerStudyDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TowerStudyDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
