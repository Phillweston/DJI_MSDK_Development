package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.db.entity.EPoint;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EPOINT".
*/
public class EPointDao extends AbstractDao<EPoint, Long> {

    public static final String TABLENAME = "EPOINT";

    /**
     * Properties of entity EPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MissionId = new Property(1, String.class, "missionId", false, "MISSION_ID");
        public final static Property Longitude = new Property(2, double.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(3, double.class, "latitude", false, "LATITUDE");
        public final static Property HomeLongitude = new Property(4, double.class, "homeLongitude", false, "HOME_LONGITUDE");
        public final static Property HomeLatitude = new Property(5, double.class, "homeLatitude", false, "HOME_LATITUDE");
        public final static Property Altitude = new Property(6, double.class, "altitude", false, "ALTITUDE");
        public final static Property Heading = new Property(7, double.class, "heading", false, "HEADING");
        public final static Property GimbalPitch = new Property(8, float.class, "gimbalPitch", false, "GIMBAL_PITCH");
        public final static Property GimbalRoll = new Property(9, float.class, "gimbalRoll", false, "GIMBAL_ROLL");
        public final static Property GimbalYaw = new Property(10, float.class, "gimbalYaw", false, "GIMBAL_YAW");
        public final static Property Speed = new Property(11, double.class, "speed", false, "SPEED");
        public final static Property HasAction = new Property(12, boolean.class, "hasAction", false, "HAS_ACTION");
        public final static Property ActionType = new Property(13, int.class, "actionType", false, "ACTION_TYPE");
    }


    public EPointDao(DaoConfig config) {
        super(config);
    }
    
    public EPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EPOINT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MISSION_ID\" TEXT," + // 1: missionId
                "\"LONGITUDE\" REAL NOT NULL ," + // 2: longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 3: latitude
                "\"HOME_LONGITUDE\" REAL NOT NULL ," + // 4: homeLongitude
                "\"HOME_LATITUDE\" REAL NOT NULL ," + // 5: homeLatitude
                "\"ALTITUDE\" REAL NOT NULL ," + // 6: altitude
                "\"HEADING\" REAL NOT NULL ," + // 7: heading
                "\"GIMBAL_PITCH\" REAL NOT NULL ," + // 8: gimbalPitch
                "\"GIMBAL_ROLL\" REAL NOT NULL ," + // 9: gimbalRoll
                "\"GIMBAL_YAW\" REAL NOT NULL ," + // 10: gimbalYaw
                "\"SPEED\" REAL NOT NULL ," + // 11: speed
                "\"HAS_ACTION\" INTEGER NOT NULL ," + // 12: hasAction
                "\"ACTION_TYPE\" INTEGER NOT NULL );"); // 13: actionType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EPOINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(2, missionId);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getHomeLongitude());
        stmt.bindDouble(6, entity.getHomeLatitude());
        stmt.bindDouble(7, entity.getAltitude());
        stmt.bindDouble(8, entity.getHeading());
        stmt.bindDouble(9, entity.getGimbalPitch());
        stmt.bindDouble(10, entity.getGimbalRoll());
        stmt.bindDouble(11, entity.getGimbalYaw());
        stmt.bindDouble(12, entity.getSpeed());
        stmt.bindLong(13, entity.getHasAction() ? 1L: 0L);
        stmt.bindLong(14, entity.getActionType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EPoint entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(2, missionId);
        }
        stmt.bindDouble(3, entity.getLongitude());
        stmt.bindDouble(4, entity.getLatitude());
        stmt.bindDouble(5, entity.getHomeLongitude());
        stmt.bindDouble(6, entity.getHomeLatitude());
        stmt.bindDouble(7, entity.getAltitude());
        stmt.bindDouble(8, entity.getHeading());
        stmt.bindDouble(9, entity.getGimbalPitch());
        stmt.bindDouble(10, entity.getGimbalRoll());
        stmt.bindDouble(11, entity.getGimbalYaw());
        stmt.bindDouble(12, entity.getSpeed());
        stmt.bindLong(13, entity.getHasAction() ? 1L: 0L);
        stmt.bindLong(14, entity.getActionType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EPoint readEntity(Cursor cursor, int offset) {
        EPoint entity = new EPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // missionId
            cursor.getDouble(offset + 2), // longitude
            cursor.getDouble(offset + 3), // latitude
            cursor.getDouble(offset + 4), // homeLongitude
            cursor.getDouble(offset + 5), // homeLatitude
            cursor.getDouble(offset + 6), // altitude
            cursor.getDouble(offset + 7), // heading
            cursor.getFloat(offset + 8), // gimbalPitch
            cursor.getFloat(offset + 9), // gimbalRoll
            cursor.getFloat(offset + 10), // gimbalYaw
            cursor.getDouble(offset + 11), // speed
            cursor.getShort(offset + 12) != 0, // hasAction
            cursor.getInt(offset + 13) // actionType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EPoint entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMissionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLongitude(cursor.getDouble(offset + 2));
        entity.setLatitude(cursor.getDouble(offset + 3));
        entity.setHomeLongitude(cursor.getDouble(offset + 4));
        entity.setHomeLatitude(cursor.getDouble(offset + 5));
        entity.setAltitude(cursor.getDouble(offset + 6));
        entity.setHeading(cursor.getDouble(offset + 7));
        entity.setGimbalPitch(cursor.getFloat(offset + 8));
        entity.setGimbalRoll(cursor.getFloat(offset + 9));
        entity.setGimbalYaw(cursor.getFloat(offset + 10));
        entity.setSpeed(cursor.getDouble(offset + 11));
        entity.setHasAction(cursor.getShort(offset + 12) != 0);
        entity.setActionType(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EPoint entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EPoint entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EPoint entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
