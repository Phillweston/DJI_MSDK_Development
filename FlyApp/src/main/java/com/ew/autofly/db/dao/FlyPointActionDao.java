package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.mode.linepatrol.point.ui.model.FlyPointAction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FLY_POINT_ACTION".
*/
public class FlyPointActionDao extends AbstractDao<FlyPointAction, String> {

    public static final String TABLENAME = "FLY_POINT_ACTION";

    /**
     * Properties of entity FlyPointAction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TaskId = new Property(1, String.class, "taskId", false, "TASK_ID");
        public final static Property PTaskId = new Property(2, String.class, "pTaskId", false, "P_TASK_ID");
        public final static Property PointId = new Property(3, String.class, "pointId", false, "POINT_ID");
        public final static Property Action = new Property(4, int.class, "action", false, "ACTION");
        public final static Property ActionName = new Property(5, String.class, "actionName", false, "ACTION_NAME");
        public final static Property StaySecond = new Property(6, int.class, "staySecond", false, "STAY_SECOND");
        public final static Property RotateAircraft = new Property(7, int.class, "rotateAircraft", false, "ROTATE_AIRCRAFT");
        public final static Property GimbalPitch = new Property(8, int.class, "gimbalPitch", false, "GIMBAL_PITCH");
        public final static Property CreateTime = new Property(9, Double.class, "createTime", false, "CREATE_TIME");
    }


    public FlyPointActionDao(DaoConfig config) {
        super(config);
    }
    
    public FlyPointActionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FLY_POINT_ACTION\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TASK_ID\" TEXT NOT NULL ," + // 1: taskId
                "\"P_TASK_ID\" TEXT NOT NULL ," + // 2: pTaskId
                "\"POINT_ID\" TEXT NOT NULL ," + // 3: pointId
                "\"ACTION\" INTEGER NOT NULL ," + // 4: action
                "\"ACTION_NAME\" TEXT," + // 5: actionName
                "\"STAY_SECOND\" INTEGER NOT NULL ," + // 6: staySecond
                "\"ROTATE_AIRCRAFT\" INTEGER NOT NULL ," + // 7: rotateAircraft
                "\"GIMBAL_PITCH\" INTEGER NOT NULL ," + // 8: gimbalPitch
                "\"CREATE_TIME\" REAL);"); // 9: createTime
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_FLY_POINT_ACTION_POINT_ID_CREATE_TIME ON \"FLY_POINT_ACTION\"" +
                " (\"POINT_ID\" ASC,\"CREATE_TIME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FLY_POINT_ACTION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FlyPointAction entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTaskId());
        stmt.bindString(3, entity.getPTaskId());
        stmt.bindString(4, entity.getPointId());
        stmt.bindLong(5, entity.getAction());
 
        String actionName = entity.getActionName();
        if (actionName != null) {
            stmt.bindString(6, actionName);
        }
        stmt.bindLong(7, entity.getStaySecond());
        stmt.bindLong(8, entity.getRotateAircraft());
        stmt.bindLong(9, entity.getGimbalPitch());
 
        Double createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindDouble(10, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FlyPointAction entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getTaskId());
        stmt.bindString(3, entity.getPTaskId());
        stmt.bindString(4, entity.getPointId());
        stmt.bindLong(5, entity.getAction());
 
        String actionName = entity.getActionName();
        if (actionName != null) {
            stmt.bindString(6, actionName);
        }
        stmt.bindLong(7, entity.getStaySecond());
        stmt.bindLong(8, entity.getRotateAircraft());
        stmt.bindLong(9, entity.getGimbalPitch());
 
        Double createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindDouble(10, createTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FlyPointAction readEntity(Cursor cursor, int offset) {
        FlyPointAction entity = new FlyPointAction( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // taskId
            cursor.getString(offset + 2), // pTaskId
            cursor.getString(offset + 3), // pointId
            cursor.getInt(offset + 4), // action
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // actionName
            cursor.getInt(offset + 6), // staySecond
            cursor.getInt(offset + 7), // rotateAircraft
            cursor.getInt(offset + 8), // gimbalPitch
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FlyPointAction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTaskId(cursor.getString(offset + 1));
        entity.setPTaskId(cursor.getString(offset + 2));
        entity.setPointId(cursor.getString(offset + 3));
        entity.setAction(cursor.getInt(offset + 4));
        entity.setActionName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStaySecond(cursor.getInt(offset + 6));
        entity.setRotateAircraft(cursor.getInt(offset + 7));
        entity.setGimbalPitch(cursor.getInt(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FlyPointAction entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(FlyPointAction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FlyPointAction entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
