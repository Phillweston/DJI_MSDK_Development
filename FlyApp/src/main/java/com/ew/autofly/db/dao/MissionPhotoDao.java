package com.ew.autofly.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ew.autofly.db.entity.MissionPhoto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MissionPhoto2".
*/
public class MissionPhotoDao extends AbstractDao<MissionPhoto, String> {

    public static final String TABLENAME = "MissionPhoto2";

    /**
     * Properties of entity MissionPhoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property MissionId = new Property(1, String.class, "missionId", false, "MISSIONID");
        public final static Property PhotoIndex = new Property(2, int.class, "photoIndex", false, "PHOTOINDEX");
        public final static Property PhotoPath = new Property(3, String.class, "photoPath", false, "PHOTOPATH");
        public final static Property CreateDate = new Property(4, java.util.Date.class, "createDate", false, "CREATEDATE");
        public final static Property BigPhotoPath = new Property(5, String.class, "bigPhotoPath", false, "bigPhotoPath");
        public final static Property Geometrys = new Property(6, String.class, "geometrys", false, "geometrys");
    }


    public MissionPhotoDao(DaoConfig config) {
        super(config);
    }
    
    public MissionPhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MissionPhoto2\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"MISSIONID\" TEXT," + // 1: missionId
                "\"PHOTOINDEX\" INTEGER NOT NULL ," + // 2: photoIndex
                "\"PHOTOPATH\" TEXT," + // 3: photoPath
                "\"CREATEDATE\" INTEGER," + // 4: createDate
                "\"bigPhotoPath\" TEXT," + // 5: bigPhotoPath
                "\"geometrys\" TEXT);"); // 6: geometrys
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MissionPhoto2\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MissionPhoto entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(2, missionId);
        }
        stmt.bindLong(3, entity.getPhotoIndex());
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(4, photoPath);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate.getTime());
        }
 
        String bigPhotoPath = entity.getBigPhotoPath();
        if (bigPhotoPath != null) {
            stmt.bindString(6, bigPhotoPath);
        }
 
        String geometrys = entity.getGeometrys();
        if (geometrys != null) {
            stmt.bindString(7, geometrys);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MissionPhoto entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String missionId = entity.getMissionId();
        if (missionId != null) {
            stmt.bindString(2, missionId);
        }
        stmt.bindLong(3, entity.getPhotoIndex());
 
        String photoPath = entity.getPhotoPath();
        if (photoPath != null) {
            stmt.bindString(4, photoPath);
        }
 
        java.util.Date createDate = entity.getCreateDate();
        if (createDate != null) {
            stmt.bindLong(5, createDate.getTime());
        }
 
        String bigPhotoPath = entity.getBigPhotoPath();
        if (bigPhotoPath != null) {
            stmt.bindString(6, bigPhotoPath);
        }
 
        String geometrys = entity.getGeometrys();
        if (geometrys != null) {
            stmt.bindString(7, geometrys);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public MissionPhoto readEntity(Cursor cursor, int offset) {
        MissionPhoto entity = new MissionPhoto( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // missionId
            cursor.getInt(offset + 2), // photoIndex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // photoPath
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // createDate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // bigPhotoPath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // geometrys
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MissionPhoto entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMissionId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPhotoIndex(cursor.getInt(offset + 2));
        entity.setPhotoPath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setBigPhotoPath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGeometrys(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(MissionPhoto entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(MissionPhoto entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MissionPhoto entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
